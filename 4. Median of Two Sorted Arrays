class Solution:
    def findMedianSortedArrays(self, nums1: list[int], nums2: list[int]) -> float:
        # Ensure nums1 is the smaller array (binary search on smaller one is faster)
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1

        m, n = len(nums1), len(nums2)
        total = m + n
        half = total // 2

        left, right = 0, m
        while left <= right:
            i = (left + right) // 2   # cut in nums1
            j = half - i              # cut in nums2

            # Get boundaries (use -inf/inf when cut is outside array)
            left1 = nums1[i-1] if i > 0 else float("-inf")
            right1 = nums1[i] if i < m else float("inf")
            left2 = nums2[j-1] if j > 0 else float("-inf")
            right2 = nums2[j] if j < n else float("inf")

            # Check if partition is correct
            if left1 <= right2 and left2 <= right1:
                # Found correct partition
                if total % 2 == 0:
                    return (max(left1, left2) + min(right1, right2)) / 2
                else:
                    return min(right1, right2)
            elif left1 > right2:
                # Move partition in nums1 left
                right = i - 1
            else:
                # Move partition in nums1 right
                left = i + 1
